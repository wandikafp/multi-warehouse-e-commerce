server:
  port: 8182
  servlet:
    session:
      timeout: 30m

logging:
  level:
    root: DEBUG
    org:
      springframework: DEBUG
  file:
    name: logs\app.log
    max-size: 10MB
    total-size: 100MB

spring:
  profiles:
    active: dev
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL9Dialect
  datasource:
    url: jdbc:postgresql://localhost:5432/user?useSSL=false
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  mail:
    host: smtp.gmail.com
    port: 465
    username: syukwisjuli16@gmail.com
    password: djknsfbonkdjgukz
    properties:
      mail:
        smtp:
#          auth: true
          ssl:
            enable: true
          starttls:
            enable: false
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: Ov23ligr9YC7IPOT3qvX
            client-secret: e18a6099a9535855ab18849f4ab2bb4929626de5
          google:
            client-id: 2121212
            client-secret: 2121212
          facebook:
            client-id: 2121212
            client-secret: 2121212

#  sql:
#    init:
#      platform: postgres
#      mode: always
# J8QQ68LN5TXJE2TX8M51NYFP

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always

kafka-config:
  bootstrap-servers: localhost:19092,localhost:29092,localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  payment-consumer-group-id: payment-topic-consumer
  seller-approval-consumer-group-id: seller-approval-topic-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

user-service:
  register-user-topic-name: register-user
  application-name: multi-warehouse-e-commerce
  base-url: http://localhost:8182
  allowed-origins: http://localhost:3000
  login-page-url: ${app.base-url}/auth/login
  login-success-url: ${app.base-url}/auth/login-success

org:
  jobrunr:
    background-job-server:
      enabled: true
    dashboard:
      enabled: true

jwt:
  secret-key: 3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b
  expiration-time: 3600000

gcp-config:
  config-file: gcp-account-file.json
  project-id: wandika-project
  bucket-id: multi-warehouse-e-commerce
  directory-name: profile-picture-dev